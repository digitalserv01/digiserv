/**
 * @fileOverview A service to interact with the DeepSeek API for content generation.
 */

interface DeepSeekMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

interface DeepSeekResponse {
  choices: Array<{
    message: {
      content: string;
    };
  }>;
  usage: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
}

export class DeepSeekAPI {
  private apiKey: string;
  private baseUrl: string;

  constructor(apiKey: string, baseUrl = 'https://api.deepseek.com/v1') {
    if (!apiKey) {
      throw new Error('DeepSeek API key is required.');
    }
    this.apiKey = apiKey;
    this.baseUrl = baseUrl;
  }

  async generateCompletion(messages: DeepSeekMessage[], options: {
    model?: string;
    temperature?: number;
    maxTokens?: number;
  } = {}): Promise<string> {
    const {
      model = 'deepseek-chat',
      temperature = 0.7,
      maxTokens = 4096,
    } = options;

    try {
      const response = await fetch(`${this.baseUrl}/chat/completions`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model,
          messages,
          temperature,
          max_tokens: maxTokens,
          stream: false,
          response_format: { type: "json_object" },
        }),
      });

      if (!response.ok) {
        const errorData = await response.text();
        throw new Error(`DeepSeek API error: ${response.status} - ${errorData}`);
      }

      const data: DeepSeekResponse = await response.json();
      
      if (!data.choices || data.choices.length === 0) {
        throw new Error('No response generated by DeepSeek API');
      }

      return data.choices[0].message.content;
    } catch (error) {
      console.error('DeepSeek API Error:', error);
      throw new Error(`Failed to generate content: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  async generateSEOContent(prompt: string): Promise<any> {
    const messages: DeepSeekMessage[] = [
      {
        role: 'system',
        content: `Tu es un expert en création de contenu SEO français pour entrepreneurs et PME. 
        Tu dois TOUJOURS répondre avec un JSON valide contenant les champs requis.
        Assure-toi que l'article fait exactement 1000-1200 mots et est complet.`
      },
      {
        role: 'user',
        content: prompt
      }
    ];

    const response = await this.generateCompletion(messages, {
      temperature: 0.8,
      maxTokens: 4096,
    });

    try {
      return JSON.parse(response);
    } catch (error) {
      console.error('Failed to parse JSON response from DeepSeek API:', response, error);
      // Attempt to fix malformed JSON
      const jsonMatch = response.match(/\{[\s\S]*\}/);
      if (jsonMatch && jsonMatch[0]) {
        try {
          return JSON.parse(jsonMatch[0]);
        } catch (parseError) {
           throw new Error('Failed to parse even the extracted JSON from DeepSeek API response.');
        }
      }
      throw new Error('Failed to parse or find JSON in the response from DeepSeek API.');
    }
  }
}
